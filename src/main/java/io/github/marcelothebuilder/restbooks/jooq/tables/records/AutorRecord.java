/**
 * This class is generated by jOOQ
 */
package io.github.marcelothebuilder.restbooks.jooq.tables.records;


import io.github.marcelothebuilder.restbooks.jooq.tables.Autor;

import java.sql.Date;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AutorRecord extends UpdatableRecordImpl<AutorRecord> implements Record4<Long, String, Date, String> {

	private static final long serialVersionUID = 2129195969;

	/**
	 * Setter for <code>PUBLIC.AUTOR.CODIGO</code>.
	 */
	public void setCodigo(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>PUBLIC.AUTOR.CODIGO</code>.
	 */
	public Long getCodigo() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.AUTOR.NOME</code>.
	 */
	public void setNome(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>PUBLIC.AUTOR.NOME</code>.
	 */
	public String getNome() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.AUTOR.NASCIMENTO</code>.
	 */
	public void setNascimento(Date value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>PUBLIC.AUTOR.NASCIMENTO</code>.
	 */
	public Date getNascimento() {
		return (Date) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.AUTOR.NACIONALIDADE</code>.
	 */
	public void setNacionalidade(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>PUBLIC.AUTOR.NACIONALIDADE</code>.
	 */
	public String getNacionalidade() {
		return (String) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, Date, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Long, String, Date, String> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Autor.AUTOR.CODIGO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Autor.AUTOR.NOME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Date> field3() {
		return Autor.AUTOR.NASCIMENTO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Autor.AUTOR.NACIONALIDADE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getCodigo();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getNome();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Date value3() {
		return getNascimento();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getNacionalidade();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AutorRecord value1(Long value) {
		setCodigo(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AutorRecord value2(String value) {
		setNome(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AutorRecord value3(Date value) {
		setNascimento(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AutorRecord value4(String value) {
		setNacionalidade(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AutorRecord values(Long value1, String value2, Date value3, String value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AutorRecord
	 */
	public AutorRecord() {
		super(Autor.AUTOR);
	}

	/**
	 * Create a detached, initialised AutorRecord
	 */
	public AutorRecord(Long codigo, String nome, Date nascimento, String nacionalidade) {
		super(Autor.AUTOR);

		setValue(0, codigo);
		setValue(1, nome);
		setValue(2, nascimento);
		setValue(3, nacionalidade);
	}
}
